import asyncio
import logging
import re
from datetime import datetime
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage

from .config import BOT_TOKEN, TIMEZONE, LOG_LEVEL
from .db import (
    init_db, get_or_create_user, create_reminder,
    get_active_reminders, get_reminder_by_id, delete_reminder,
    mark_workout_completed, get_user_stats, get_db, rename_reminder,
    get_any_reminder_by_id   # –∏—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ is_active
)
from .scheduler import (
    set_bot_instance, start_scheduler, stop_scheduler,
    restore_reminders_from_db, schedule_once_reminder,
    schedule_everyday_reminder, schedule_days_reminder, remove_job
)

# ---------------- Logging ----------------
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ---------------- Bot/DP -----------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# --------------- Helpers -----------------
def validate_time_format(time_str: str) -> bool:
    return bool(re.match(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$', time_str))


def parse_days(days_str: str):
    mapping = {
        '–ø–Ω': 0, '–≤—Ç': 1, '—Å—Ä': 2, '—á—Ç': 3, '–ø—Ç': 4, '—Å–±': 5, '–≤—Å': 6,
        'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6
    }
    items = [d.strip().lower() for d in days_str.split(',') if d.strip()]
    if not items:
        return False, "–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏."
    nums = []
    for d in items:
        if d not in mapping:
            return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {d}"
        nums.append(mapping[d])
    seen, out = set(), []
    for x in nums:
        if x not in seen:
            out.append(x)
            seen.add(x)
    return True, out


def days_list_to_str(days: list[int]) -> str:
    back = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
    return ",".join(back[d] for d in days)


# --------------- Commands ----------------
@dp.message(CommandStart())
async def start_command(message: Message):
    get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    await message.answer(
        f"üí™ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add HH:MM —Ç–µ–∫—Å—Ç ‚Äî —Ä–∞–∑–æ–≤–æ–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ /everyday HH:MM —Ç–µ–∫—Å—Ç ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ /days –ø–Ω,—Å—Ä,–ø—Ç HH:MM —Ç–µ–∫—Å—Ç ‚Äî –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ /rename ID –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        "‚Ä¢ /delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /done ID ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n\n"
        "–ü—Ä–∏–º–µ—Ä: /add 18:00 –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ üí™"
    )


@dp.message(Command("add"))
async def add_reminder(message: Message):
    """Create one-time reminder for today."""
    try:
        args = message.text.split(' ', 2)
        if len(args) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /add HH:MM —Ç–µ–∫—Å—Ç")
            return

        time_str, text = args[1].strip(), args[2].strip()
        if not validate_time_format(time_str):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä. 18:00")
            return

        tz = pytz.timezone(TIMEZONE)
        now = datetime.now(tz)
        h, m = map(int, time_str.split(":"))
        target = now.replace(hour=h, minute=m, second=0, microsecond=0)
        if target <= now:
            await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è. –£–∫–∞–∂–∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–µ.")
            return

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        reminder = create_reminder(user_id=user.id, reminder_type="once", time=time_str, text=text)
        job_id = schedule_once_reminder(reminder.id, message.from_user.id, time_str, text)

        if job_id:
            with get_db() as dbs:
                db_rem = dbs.get(reminder.__class__, reminder.id)
                db_rem.job_id = job_id
                dbs.commit()
            await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüïê {time_str}\nüìù {text}\nüÜî ID: {reminder.id}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    except Exception as e:
        logger.exception("Error in /add: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


@dp.message(Command("everyday"))
async def everyday_reminder(message: Message):
    try:
        args = message.text.split(' ', 2)
        if len(args) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /everyday HH:MM —Ç–µ–∫—Å—Ç")
            return

        time_str, text = args[1].strip(), args[2].strip()
        if not validate_time_format(time_str):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å HH:MM.")
            return

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        reminder = create_reminder(user_id=user.id, reminder_type="everyday", time=time_str, text=text)
        job_id = schedule_everyday_reminder(reminder.id, message.from_user.id, time_str, text)

        if job_id:
            with get_db() as dbs:
                db_rem = dbs.get(reminder.__class__, reminder.id)
                db_rem.job_id = job_id
                dbs.commit()
            await message.answer(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüïê {time_str}\nüìù {text}\nüÜî ID: {reminder.id}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    except Exception as e:
        logger.exception("Error in /everyday: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


@dp.message(Command("days"))
async def days_reminder(message: Message):
    """Create reminder for specific days of week."""
    try:
        # /days –ø–Ω,—Å—Ä,–ø—Ç HH:MM —Ç–µ–∫—Å—Ç
        args = message.text.split(' ', 3)
        if len(args) < 4:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /days –¥–Ω–∏ HH:MM —Ç–µ–∫—Å—Ç\n–ù–∞–ø—Ä.: /days –ø–Ω,—Å—Ä,–ø—Ç 19:00 –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
            return

        days_str_raw, time_str, text = args[1].strip(), args[2].strip(), args[3].strip()
        ok, parsed = parse_days(days_str_raw)
        if not ok:
            await message.answer(f"‚ùå {parsed}\n–î–Ω–∏: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å")
            return

        if not validate_time_format(time_str):
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å HH:MM.")
            return

        days_str_norm = days_list_to_str(parsed)  # —Ö—Ä–∞–Ω–∏–º —Å—Ç—Ä–æ–∫–æ–π

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        reminder = create_reminder(
            user_id=user.id, reminder_type="days", time=time_str, text=text, days=days_str_norm
        )
        job_id = schedule_days_reminder(reminder.id, message.from_user.id, time_str, days_str_norm, text)

        if job_id:
            with get_db() as dbs:
                db_rem = dbs.get(reminder.__class__, reminder.id)
                db_rem.job_id = job_id
                dbs.commit()
            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º —Å–æ–∑–¥–∞–Ω–æ!\nüìÖ –î–Ω–∏: {days_str_norm}\nüïê {time_str}\nüìù {text}\nüÜî ID: {reminder.id}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º.")
    except Exception as e:
        logger.exception("Error in /days: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


@dp.message(Command("list"))
async def list_reminders(message: Message):
    try:
        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        reminders = get_active_reminders(user_id=user.id)
        if not reminders:
            await message.answer("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        type_emoji = {'once': 'üîî', 'everyday': 'üîÑ', 'days': 'üìÖ'}
        lines = ["üìã –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"]
        for r in reminders:
            type_text = (
                '–†–∞–∑–æ–≤–æ–µ' if r.reminder_type == 'once'
                else ('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' if r.reminder_type == 'everyday' else f"–ü–æ –¥–Ω—è–º: {r.days}")
            )
            lines.append(
                f"{type_emoji.get(r.reminder_type, 'üîî')} **ID {r.id}**\n"
                f"‚è∞ {r.time}\n"
                f"üìù {r.text}\n"
                f"üìä {type_text}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {r.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
        await message.answer("\n".join(lines), parse_mode="Markdown")
    except Exception as e:
        logger.exception("Error in /list: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")


@dp.message(Command("delete"))
async def delete_reminder_command(message: Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /delete ID")
            return
        try:
            reminder_id = int(args[1])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        reminder = get_reminder_by_id(reminder_id, user_id=user.id)
        if not reminder:
            await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–æ).")
            return

        if reminder.job_id:
            remove_job(reminder.job_id)

        if delete_reminder(reminder_id, user_id=user.id):
            await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ! ID: {reminder_id}\nüìù {reminder.text}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    except Exception as e:
        logger.exception("Error in /delete: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")


@dp.message(Command("rename"))
async def rename_reminder_command(message: Message):
    """/rename ID –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"""
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /rename ID –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç")
            return

        try:
            reminder_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        new_text = parts[2].strip()
        if not new_text:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.")
            return

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        reminder = get_reminder_by_id(reminder_id, user_id=user.id)
        if not reminder:
            await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if not rename_reminder(reminder_id, user.id, new_text):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            return

        if reminder.job_id:
            remove_job(reminder.job_id)

        if reminder.reminder_type == "once":
            job_id = schedule_once_reminder(reminder.id, message.from_user.id, reminder.time, new_text)
        elif reminder.reminder_type == "everyday":
            job_id = schedule_everyday_reminder(reminder.id, message.from_user.id, reminder.time, new_text)
        else:
            job_id = schedule_days_reminder(reminder.id, message.from_user.id, reminder.time, reminder.days, new_text)

        if job_id:
            with get_db() as dbs:
                db_rem = dbs.get(reminder.__class__, reminder.id)
                db_rem.job_id = job_id
                dbs.commit()

        await message.answer(f"‚úè –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_text}")
    except Exception as e:
        logger.exception("Error in /rename: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏.")


@dp.message(Command("done"))
async def mark_done_command(message: Message):
    """Manual /done ID (optional, –∫–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ —É–¥–æ–±–Ω–µ–µ)."""
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /done ID")
            return
        try:
            reminder_id = int(args[1])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        # –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –ª—é–±—ã–µ (–Ω–∞ —Å–ª—É—á–∞–π once)
        reminder = get_reminder_by_id(reminder_id, user_id=user.id) or \
                   get_any_reminder_by_id(reminder_id, user_id=user.id)
        if not reminder:
            await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        mark_workout_completed(reminder_id, user.id, reminder.text)
        await message.answer(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\nüí™ {reminder.text}\n‚≠ê –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
    except Exception as e:
        logger.exception("Error in /done: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:
    - –ø–æ –¥–Ω—è–º: '–î–î.–ú–ú.–ì–ì–ì–ì ‚Äî X –∏–∑ Y' + –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä + ‚úÖ –¥–ª—è 100%
    - –ª—É—á—à–∏–π –∏ —Å–ª–∞–±—ã–π –¥–µ–Ω—å
    - —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è 100%-–¥–Ω–µ–π (streak)
    - —Å—Ä–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
    - –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å
    """
    try:
        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        # –ü–æ—Å—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π (—Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, ...)
        from .db import get_daily_7d_ratio, get_active_reminders
        items = get_daily_7d_ratio(user.id, tz_str=TIMEZONE)

        if not items:
            await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π. –ù–∞—á–Ω—ë–º —Å –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™")
            return

        total_done = sum(it["done"] for it in items)
        total_planned = sum(it["planned"] for it in items)
        avg_done = total_done / len(items)
        avg_planned = total_planned / len(items) if len(items) else 0
        avg_pct = int(round(100 * total_done / total_planned)) if total_planned > 0 else 0

        # –õ—É—á—à–∏–π / —Å–ª–∞–±—ã–π –¥–µ–Ω—å (—Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –≥–¥–µ –µ—Å—Ç—å –ø–ª–∞–Ω)
        def ratio(it):
            return (it["done"] / it["planned"]) if it["planned"] > 0 else -1
        planned_days = [it for it in items if it["planned"] > 0]
        best_line = max(planned_days, key=ratio) if planned_days else None
        worst_line = min(planned_days, key=ratio) if planned_days else None

        # –°–µ—Ä–∏—è 100% –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –Ω–∞–∑–∞–¥ (–¥–Ω–∏ –±–µ–∑ –ø–ª–∞–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        streak = 0
        for it in items:
            if it["planned"] == 0:
                continue
            if it["done"] >= it["planned"]:
                streak += 1
            else:
                break

        # –°—Ç—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º
        lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {len(items)} –¥–Ω–µ–π:\n"]
        for it in items:
            planned = it["planned"]
            done = it["done"]
            if planned > 0:
                r = done / planned
                units = max(1, int(round(min(1.0, r) * 10)))  # 1..10
                bar = "‚ñÆ" * units
            else:
                bar = "‚Äî"
            suffix = " ‚úÖ" if planned > 0 and done >= planned else ""
            lines.append(f"üóì {it['date']} ‚Äî {done} –∏–∑ {planned}   {bar}{suffix}")

        # –ò—Ç–æ–≥–∏
        lines.append("\n–ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:")
        lines.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_done}")
        lines.append(f"üéØ –ü–ª–∞–Ω: {total_planned}")
        if total_planned > 0:
            lines.append(f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {avg_pct}%")

        # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        lines.append(f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å: {avg_done:.1f} –∏–∑ {avg_planned:.1f}")

        # –õ—É—á—à–∏–π / —Å–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å
        if best_line:
            bpct = int(round(100 * best_line["done"] / best_line["planned"])) if best_line["planned"] else 0
            lines.append(f"üåü –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_line['date']} ‚Äî {best_line['done']}/{best_line['planned']} ({bpct}%)")
        if worst_line and worst_line is not best_line:
            wpct = int(round(100 * worst_line["done"] / worst_line["planned"])) if worst_line["planned"] else 0
            lines.append(f"‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å: {worst_line['date']} ‚Äî {worst_line['done']}/{worst_line['planned']} ({wpct}%)")

        # –°–µ—Ä–∏—è 100%
        if streak > 0:
            lines.append(f"üî• –°–µ—Ä–∏—è 100% –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak}")

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å
        active_now = len(get_active_reminders(user_id=user.id))
        lines.append(f"\nüîî –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–µ–π—á–∞—Å: {active_now}")

        # –ú–æ—Ç–∏–≤–∞—à–∫–∞
        if total_planned > 0:
            if avg_pct >= 95:
                lines.append("\nüèÜ –¢—ã –º–∞—à–∏–Ω–∞! –î–µ—Ä–∂–∏ —ç—Ç–æ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–º–ø!")
            elif avg_pct >= 80:
                lines.append("\n‚≠ê –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ß—É—Ç—å-—á—É—Ç—å ‚Äî –∏ –±—É–¥–µ—Ç 100% üòâ")
            elif avg_pct >= 50:
                lines.append("\nüí™ –ù–µ–ø–ª–æ—Ö–æ! –ü–æ—Ä–∞ –ø–æ–¥–Ω—è—Ç—å –ø–ª–∞–Ω–∫—É –µ—â—ë –Ω–∞ —à–∞–≥!")
            else:
                lines.append("\nüöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ ‚Äî —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å —Å–¥–µ–ª–∞—Ç—å +1!")

        await message.answer("\n".join(lines))
    except Exception as e:
        logger.exception("Error in /stats: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(Command("weeks"))
async def weeks_command(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ (—Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π):
    1) 12.08‚Äì18.08 ‚Äî 55/56 (98%)
    2) 19.08‚Äì25.08 ‚Äî 50/56 (89%)
    ...
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥–∏—Ç –¥–æ 12 –Ω–µ–¥–µ–ª—å. –ú–æ–∂–Ω–æ: /weeks 20
    """
    try:
        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        parts = message.text.split()
        limit = 12
        if len(parts) == 2:
            try:
                limit = max(1, min(52, int(parts[1])))
            except ValueError:
                pass

        from .db import finalize_past_weeks, get_week_summaries
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—à–ª—ã–µ –Ω–µ–¥–µ–ª–∏
        finalize_past_weeks(user.id, tz_str=TIMEZONE)

        weeks = get_week_summaries(user.id, tz_str=TIMEZONE)
        if not weeks:
            await message.answer("üóÇ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤. –î–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è üòâ")
            return

        # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 –æ—Ç —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        if len(weeks) > limit:
            weeks = weeks[-limit:]

        lines = ["üóÇ –ù–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏:\n"]
        for i, w in enumerate(weeks, start=1):
            lines.append(f"{i}) {w['range']} ‚Äî {w['done']}/{w['planned']} ({w['pct']}%)")

        await message.answer("\n".join(lines))
    except Exception as e:
        logger.exception("Error in /weeks: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤.")


@dp.callback_query(F.data.startswith("done_"))
async def handle_done_callback(callback: CallbackQuery):
    """Inline button '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'."""
    try:
        reminder_id = int(callback.data.split("_")[1])

        user = get_or_create_user(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )

        # 1) —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, 2) –µ—Å–ª–∏ once —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –∏—â–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        reminder = get_reminder_by_id(reminder_id, user_id=user.id) or \
                   get_any_reminder_by_id(reminder_id, user_id=user.id)

        if not reminder:
            await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        mark_workout_completed(reminder_id, user.id, reminder.text)
        await callback.message.edit_text(
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n{reminder.text}\n\nüéâ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
        )
        await callback.answer("üéâ –û—Ç–º–µ—á–µ–Ω–æ!")
    except Exception as e:
        logger.exception("Error in done callback: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞.", show_alert=True)

@dp.message(Command("weeks"))
async def weeks_command(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏:
    1) 12.08‚Äì18.08 ‚Äî 55/56 (98%)
    2) 19.08‚Äì25.08 ‚Äî 50/56 (89%)
    ...
    """
    try:
        user = get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        from .db import finalize_past_weeks, get_week_summaries
        finalize_past_weeks(user.id, tz_str=TIMEZONE)
        weeks = get_week_summaries(user.id, tz_str=TIMEZONE)

        if not weeks:
            await message.answer("üóÇ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤. –î–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è üòâ")
            return

        lines = ["üóÇ –ù–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏:\n"]
        for i, w in enumerate(weeks, start=1):
            lines.append(f"{i}) {w['range']} ‚Äî {w['done']}/{w['planned']} ({w['pct']}%)")

        await message.answer("\n".join(lines))
    except Exception as e:
        logger.exception("Error in /weeks: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤.")


@dp.message()
async def handle_unknown_command(message: Message):
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add HH:MM —Ç–µ–∫—Å—Ç ‚Äî —Ä–∞–∑–æ–≤–æ–µ\n"
        "‚Ä¢ /everyday HH:MM —Ç–µ–∫—Å—Ç ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ\n"
        "‚Ä¢ /days –ø–Ω,—Å—Ä,–ø—Ç HH:MM —Ç–µ–∫—Å—Ç ‚Äî –ø–æ –¥–Ω—è–º\n"
        "‚Ä¢ /rename ID –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ /delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /done ID ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /start üòä"
    )


# --------------- App entry ----------------
async def main():
    try:
        init_db()
        set_bot_instance(bot)
        start_scheduler()
        restore_reminders_from_db()
        logger.info("Bot starting...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        stop_scheduler()
        logger.info("Bot stopped")


if __name__ == "__main__":
    asyncio.run(main())
